@page "/addDelivrer"
@inject IJSRuntime jsRuntime
@inject DelivererService _delivererService
@inject NavigationManager NavigationManager

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

@if (delivrer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@delivrer" Submit="@((Delivrer args) => { Submit(args); })">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <RadzenFieldset Text="Saisissez les Informations">
                        <div class="row">
                            <div class="align-items-center d-flex col-md-2">
                                <RadzenLabel Text="Nom" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextBox @bind-Value="delivrer.Name" Disabled="false" Placeholder="Yovo" style="width: 100%;" Name="Name" />
                                
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add_location" Text="Locate store" style="float: right;">
                                </RadzenButton>
                            </div>
                        </div>
                        <div class="row">
                            <div class="align-items-center d-flex col-md-2">
                                <RadzenLabel Text="Prénom" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextBox @bind-Value="delivrer.FirstName" Disabled="false" Placeholder="Yawo" style="width: 100%;" Name="fName" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="align-items-center d-flex col-md-2">
                                <RadzenLabel Text="Quartier" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextBox @bind-Value="delivrer.Quarter" Disabled="false" Placeholder="Baguida-Kagomé" style="width: 100%;" Name="Quarter" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="align-items-center d-flex col-md-2">
                                <RadzenLabel Text="Contact" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextBox @bind-Value="delivrer.Phone" Disabled="false" Placeholder="98567578" style="width: 100%;" Name="Quarter" />
                            </div>
                        </div>

                        <div class="col-md-4 p-3">
                            <RadzenCard>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Ajouter image</RadzenText>
                                <RadzenUpload Multiple="true" Accept="image/*" Url="upload/multiple" Progress=@(args => OnProgress(args, "Images only upload")) class="w-100" />
                            </RadzenCard>
                        </div>
                        <div class="rz-p-12 rz-text-align-center">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date d'embauche'</RadzenText>
                            <RadzenDatePicker @bind-Value="delivrer.HireDate" Inline="true" />
                        </div>
                    </RadzenFieldset>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-6 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                </div>
            </div>
        </div>
    </RadzenTemplateForm>

    <EventConsole @ref=@console />
}

@code {

    Delivrer delivrer = new Delivrer();

    RadzenUpload upload;
    EventConsole console;


    int progress;
    bool showProgress;
    bool showComplete;
    string completionMessage;
    bool cancelUpload = false;

    void CompleteUpload(UploadCompleteEventArgs args)
    {
        if (!args.Cancelled)
            completionMessage = "Upload Complete!";
        else
            completionMessage = "Upload Cancelled!";

        showProgress = false;
        showComplete = true;
    }

    void TrackProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;

        // cancel upload
        args.Cancel = cancelUpload;

        // reset cancel flag
        cancelUpload = false;
    }

    void CancelUpload()
    {
        cancelUpload = true;
    }

    int customParameter = 1;

    void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            console.Log($"File: {file.Name} / {file.Size} bytes");
        }

        console.Log($"{name} changed");
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        console.Log($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnComplete(UploadCompleteEventArgs args)
    {
        console.Log($"Server response: {args.RawResponse}");
    }

    async Task Submit(Delivrer arg)
    {
        string token = await jsRuntime.InvokeAsync<string>("sessionStorage.getItem", "token");
        // get deliverers
        bool del = _delivererService.CreateDeliverer(arg, token).Result;
        if (del)
        {
            // give a success response
            // alert message

        }
        else
        {
            
        }
        NavigationManager.NavigateTo("/allDelivrers");
    }

    void Cancel()
    {
        //
    }
}
